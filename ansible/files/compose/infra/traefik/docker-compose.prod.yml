version: '3.7'

services:
  traefik:
    hostname: traefik
    image: traefik:v2.3
    command:
      # - "--log.level=DEBUG"
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik_proxy"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.le.acme.email=sysadmin@karisma.com.co"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      # - "--serversTransport.insecureSkipVerify=true"
      # - "--providers.docker.watch"
      # - "--api.insecure=true"
      #- "--providers.docker.tls.insecureskipverify=true"
      # - "--providers.http.tls.insecureskipverify=true"
    ports:
      # To be able to see the client's real IP we need to bind ports like this
      # so ports are not controlled by swarm's mesh network
      # https://dockerswarm.rocks/traefik/#getting-the-client-ip
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      # Use this if direct access to traefik dashboard is needed
      # - target: 8080
      #   published: 8080
      #   mode: host
    dns:
      - 1.1.1.1
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Dashboard
        - "traefik.enable=true"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik.service=dashboard"
        - "traefik.http.routers.traefik.rule=Host(`traefik.karisma.org.co`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=auth"
        - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$QHDPJ4w0$$Ybhi/JJYchLNX8qFCvl780"
        # Letsencrypt
        - "traefik.http.routers.traefik.tls.certresolver=le"
        - "traefik.http.routers.traefik.entrypoints=https"
        - "traefik.http.routers.traefik.tls=true"
        # Redirect a https global
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=http"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
        # Redirect del middleware
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
    networks:
      - traefik_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - "/etc/localtime:/etc/localtime:ro"
    # configs:
      # - traefik.toml:/etc/traefik/traefik.toml
      # - source: traefik.toml
      #   target: /etc/traefik/traefik.toml
      #   uid: '103'
      #   gid: '103'
      #   mode: 0440
      # - source: htpasswd
      #   target: /etc/traefik/htpasswd

volumes:
  traefik-certificates:

# configs:
  # traefik.toml:
  #   external: true
  # htpasswd:
  #   external: true

networks:
  traefik_proxy:
    external:
      name: traefik_proxy
